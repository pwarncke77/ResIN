[{"path":"/articles/ResIN-VIGNETTE.html","id":"introducing-resin","dir":"Articles","previous_headings":"","what":"Introducing ResIN","title":"ResIN Tutorial-Vignette","text":"ResIN model co-endorsements social attitudes. Broadly understood, attitudes denote sentiments towards social political issue, instance, opposing cuts minimum wage, neutral carbon taxes, supporting equal pay women men. ResIN presumes people co-endorse given pair attitudes (e.g. simultaneously supporting equal pay opposing cuts minimum wage), closer attitudes related one another latent space. formally, ResIN models possible interactions among given set attitudes statistical network, responses form nodes edge-weights (connecting links) determines strength attractive force . Unlike classic belief network models, ResIN takes explicit advantage latent space attitude nodes embedded . Given co-endorsed (.e. positively correlated) nodes attract one another, force simulation involving survey response nodes (.e. force-directed algorithm) results interpretable, theoretically meaningful latent space attitudes people can located. see action, let’s replicate extend analysis Lüders et.al.’s 2024 piece, ‘Attitude networks intergroup realities: Using network‐modelling research attitude‐identity relationships polarized political contexts.’","code":""},{"path":"/articles/ResIN-VIGNETTE.html","id":"data-import-and-cleaning","dir":"Articles","previous_headings":"","what":"Data import and cleaning","title":"ResIN Tutorial-Vignette","text":"data analysis, little bit housekeeping goes long way… ResIN exception! Let’s use Lüders et.al. (2024) data – comes free R-package – illustrate process. First, lets select core set eight issue items Lüders et.al. data , paper, re-code agreement always denotes liberal position. (step necessary makes interpretation results easier). attitudes deal legality abortion, reducing income inequality, deporting illegal immigrants, increasing welfare spending, increase welfare spending, gay marriage, protecting environment, gun control, government aid African Americans. ’ll also give item respective response options telling labels improve visual interpretability. cleaned data set now looks like :","code":"## Loading the required packages library(ResIN) if(!require(\"dplyr\")) install.packages('dplyr') library(dplyr, warn.conflicts = FALSE)  ## Loading the data BrJSocPsychol_2024 <- ResIN::BrJSocPsychol_2024  ## Sub-setting and re-coding items in a liberal-conservative direction Core_Items <- BrJSocPsychol_2024 %>% dplyr::select(Q9_1, Q9_2, Q9_3, Q9_4,                                                     Q9_5, Q9_6, Q9_7, Q9_8) %>%     dplyr::mutate(Q9_1 = dplyr::recode(Q9_1, \"Strongly Disagree\" = \"Strongly Agree\",                                      \"Somewhat Disagree\" = \"Somewhat Agree\",                                      \"Neutral\" = \"Neutral\",                                      \"Somewhat Agree\" = \"Somewhat Disagree\",                                      \"Strongly Agree\" = \"Strongly Disagree\"),                 Q9_3 = dplyr::recode(Q9_3,  \"Strongly Disagree\" = \"Strongly Agree\",                                      \"Somewhat Disagree\" = \"Somewhat Agree\",                                      \"Neutral\" = \"Neutral\",                                      \"Somewhat Agree\" = \"Somewhat Disagree\",                                      \"Strongly Agree\" = \"Strongly Disagree\"))  ## Relabeling the attitudes colnames(Core_Items) <- c(\"legal_abort\", \"equalize_incomes\", \"keep_immigrants\",                            \"welfare_spending\", \"gay_marriage\", \"protect_environ\",                            \"gun_control\", \"aid_blacks\")  # Assigning response symbols for easier interpretation Core_Items <- Core_Items %>%   mutate(across(everything(), ~ dplyr::recode(.,     \"Strongly Agree\" = \"++\",     \"Somewhat Agree\" = \"+\",     \"Neutral\" = \"+/-\",     \"Somewhat Disagree\" = \"-\",     \"Strongly Disagree\" = \"--\",   )))  ## Setting the seed for consistency set.seed(42) head(Core_Items) #> # A tibble: 6 × 8 #>   legal_abort equalize_incomes keep_immigrants welfare_spending gay_marriage #>   <chr>       <chr>            <chr>           <chr>            <chr>        #> 1 --          -                -               +/-              --           #> 2 ++          ++               +               ++               ++           #> 3 +           +                +/-             +                +/-          #> 4 +           +/-              ++              +/-              -            #> 5 -           +                +               +                -            #> 6 ++          +                ++              ++               ++           #> # ℹ 3 more variables: protect_environ <chr>, gun_control <chr>, #> #   aid_blacks <chr>"},{"path":"/articles/ResIN-VIGNETTE.html","id":"create-your-first-resin-network","dir":"Articles","previous_headings":"","what":"Create your first ResIN network!","title":"ResIN Tutorial-Vignette","text":"Let’s get meat . first, bare-bones ResIN model, can simply supply set Core_Items ResIN function.  bad! ’ll notice ResIN function produces plots basic ggplot default. latter feature can turned setting plot_ggplot=FALSE (something definitely want need bootstrapping thousands networks, ’ll get part later). can always access call ResIN-plot object stored output: ResIN_output$ResIN_ggplot. suppress --shelf plot generation altogether, simply set generate_ggplot=FALSE. like produce less busy looking plot, can replace node labels simpler geom_point-aesthetic specifying plot_responselabels=FALSE. One feat might noticed plot ResIN innately care politically left attitudes also plotted left-hand side graph. fact, left-wing attitude cluster happens appear right-hand-side plot. modeling concepts spatial orientation particular meaning, political ideology, can specify particular attitude node consistently appear left side resulting graph left_anchor argument. , ’ll set left_anchor = \"legal_abort_++\" strongly wishing preserve legal access abortion appears one left-wing attitude starting plot. (Setting left_anchor affect network estimation spatial positioning nodes - simply flips x-axis target node appear right-hand half graph). ’ll also set random seed avoid (minor) fluctuations -runs.","code":"ResIN_out <- ResIN(Core_Items) first_ResIN <- ResIN(Core_Items, plot_responselabels=FALSE, plot_ggplot=FALSE, seed = 22, left_anchor = \"legal_abort_++\")  first_ResIN$ResIN_ggplot"},{"path":"/articles/ResIN-VIGNETTE.html","id":"node-coloring-options-visual-enhancements","dir":"Articles","previous_headings":"","what":"Node coloring options & visual enhancements","title":"ResIN Tutorial-Vignette","text":"far good. plots nicely reveal familiar unidimensional spectrum US politics item responses favor welfare spending, protecting environment, protecting abortion rights left inverse positions political right. However, graph also shows left-leaning attitude cluster appears much consolidated; left-wingers (strongly) agree much frequently consistently respondents opposite end ideological aisle. moderates? Let’s try reproduce figure 2a Lüders et.al.’s (2024, p. 45) get clarity .  function call, ’ll notice couple additional arguments. important one, plot_whichstat, determines piece information ’d like visually enhance. Lüders’s figure 2a, simply opted different response choices setting plot_whichstat=\"choices\". Since R applies alpha-numeric coding qualitative response levels, can supply correct order (either least least agreement) response_levels argument. character vector length response levels – just remember set response items correct order. original paper, omit response labels favor dots nodes. Finally, plot_title argument lets specify custom title. Neat - ha?! plot shows neutral nodes far often co-endorsed moderate-right strong-right choice options. , right-wing attitude space appears mixed incorporates neutral even moderate-left leaning response options. estimating visualizing node clusters next?","code":"ResIN_out <- ResIN(Core_Items, plot_whichstat = \"choices\",                     response_levels = c(\"--\", \"-\", \"+/-\" , \"+\", \"++\"),                     plot_responselabels = FALSE,                     plot_title = \"BrJSocPsychol 2024 ResIN Network\",                    left_anchor = \"legal_abort_++\", seed = 22)"},{"path":"/articles/ResIN-VIGNETTE.html","id":"cluster-detection-and-plotting","dir":"Articles","previous_headings":"","what":"Cluster detection and plotting","title":"ResIN Tutorial-Vignette","text":"ResIN() function can natively call several cluster detection algorithms. turn feature , simply set detect_clusters=FALSE. default, ResIN obtains latent cluster assignments based leading eigenvector method (cluster_method=\"cluster_leading_eigen\") cluster detection algorithms currently implemented igrah-package can utilized. avoid confusion color scheme, ’ll also specify different color_palette . ResIN function supports default ggplot scale-brewer palettes.   networks nicely showcase different community detection algorithms can yield different solutions. However, leading-eigenvalue fast-greedy examples indicate moderate node communities (1, 4 1 ) appears spatially proximate right-wing cluster suggests similar answering behavior among groups respondents. can find node-level cluster assignments via ResIN_out$ResIN_nodeframe$cluster. individual-level probabilistic, cluster assignments can accessed via auxiliary objects: ResIN_out$aux_objects$cluster_probabilities. maximum probability assignments contained max_clusterprob object stored location.","code":"## Using leading eigenvalue by default: ResIN_out <- ResIN(Core_Items, detect_clusters = TRUE, plot_whichstat = \"cluster\",                     plot_responselabels = FALSE, plot_title = \"Leading eigenvalue community detection\",                    color_palette = \"Set2\", seed = 22, left_anchor = \"legal_abort_++\") ## Switching to edge-betweenness cluster detection: ResIN_out <- ResIN(Core_Items, detect_clusters = TRUE, plot_whichstat = \"cluster\",                    cluster_method = \"cluster_fast_greedy\", plot_responselabels = FALSE,                    plot_title = \"Fast and greedy community detection\",                    color_palette = \"Set1\", seed = 22, left_anchor = \"legal_abort_++\") head(ResIN_out$aux_objects$cluster_probabilities) #>   cluster_1 cluster_2 cluster_3 #> 1     0.750     0.250     0.000 #> 2     0.125     0.000     0.875 #> 3     0.875     0.125     0.000 #> 4     0.750     0.125     0.125 #> 5     1.000     0.000     0.000 #> 6     0.125     0.000     0.875"},{"path":"/articles/ResIN-VIGNETTE.html","id":"node-centrality","dir":"Articles","previous_headings":"","what":"Node centrality","title":"ResIN Tutorial-Vignette","text":"ResIN() function delivers --shelve estimates various node-level statistics, including strength, closeness, betweenness-centrality, well expected node influence. also estimates couple graph-level quantities including global clustering coefficient, average path length, network diameter. quantities always estimated default; turn feature , simply specify network_stats=FALSE. example visualizes differences strength centrality (possible set plot_whichstat either “Strength”, “Closeness”, “Betweenness”, “ExpectedInfluence”. raw metrics node-level statistic can found ResIN_out\\$ResIN_nodeframe. Graph-level statistics stored ResIN_out\\$graph_stats.","code":"ResIN_out <- ResIN(Core_Items, plot_whichstat = \"Strength\", plot_responselabels = FALSE,                     plot_title = \"Node strength centrality\", seed = 22, color_palette = \"Greens\",                    left_anchor = \"legal_abort_++\")"},{"path":"/articles/ResIN-VIGNETTE.html","id":"edge-centrality-and-adjustments-to-the-edge-width","dir":"Articles","previous_headings":"","what":"Edge centrality and adjustments to the edge width","title":"ResIN Tutorial-Vignette","text":"ResIN() also supports visual adjustments edge thickness basis either bi-variate correlation weight (plot_edgestat = \"weights\") edge betweenness centrality (plot_edgestat = \"cluster_edge_betweenness\"). example showcases latter also visualizing clusters detected edge betweenness algorithm.","code":"ResIN_out <- ResIN(Core_Items, detect_clusters = TRUE, plot_whichstat = \"cluster\",                    cluster_method = \"cluster_edge_betweenness\",                     plot_edgestat = \"edgebetweenness\",                    plot_responselabels = FALSE,                     plot_title = \"Edge weight based on edge-betweenness centrality\",                    seed = 22, color_palette = \"Set1\", left_anchor = \"legal_abort_++\")"},{"path":"/articles/ResIN-VIGNETTE.html","id":"using-covariates","dir":"Articles","previous_headings":"","what":"Using covariates","title":"ResIN Tutorial-Vignette","text":"ability visualize various covariates interest node-level one ResIN’s powerful assets. Lüders et.al.’s (2024, p. 45) employed strategy co-visualize ResIN node position node-level partisan-affective polarization among sample (figure 2b.). accomplish ResIN function, first need attach covariates interest attitude frame. , simply need tell ResIN data columns treat node variables supplying dedicated node_vars vector. Likewise need supply separate string, node_covars, specifying desired set node-level covariates. Finally, tell ResIN using argument node_costats covariate statistic calculate given covariates. Currently supported \"mean\", \"median\", \"sd\", \"var\", several , base-R functions. Just make sure node_costats length node_covars ResIN knows statistic extract covariate. Attached ResIN_nodeframe, resulting ResIN object feature new set variables concatenated labels consisting original co-variate name desired statistic (e.g., ResIN_nodeframe$age_mean). want visualize node-level covariates, simply need supply concatenated covariate-statistic label plot_whichstat argument. example shows replicate affective polarization measure Lüders et.al. (2024) following strategy.  latest plot nicely visualizes co-dependency affective issue polarization characterizes contemporary American political attitude space. However, also shows relationship entirely symmetric; left-wing attitudes associated approximately degree affective bias, select attitudes within diverse, center/ center-right attitude community predominantly endorsed affectively polarized individuals. Switching back viewing complete response labels, ’ll note respondents strongly reject government aid African Americans environmental regulations particular.","code":"## Calculating the relative preference of Democrats over Republicans    ##(Democrat feelings thermometer minus republican feelings thermometer) Core_Items$dem_bias  <- as.numeric(BrJSocPsychol_2024$Q15_1) - as.numeric(BrJSocPsychol_2024$Q15_2)  ## Separately specifying attitude nodes and covariate here:  ResIN_out <- ResIN(Core_Items,                    node_vars = c(\"legal_abort\", \"equalize_incomes\", \"keep_immigrants\",                                  \"welfare_spending\", \"gay_marriage\", \"protect_environ\",                                  \"gun_control\", \"aid_blacks\"), node_covars = c(\"dem_bias\"),                    node_costats = c(\"mean\"), plot_whichstat = \"dem_bias_mean\",                    plot_responselabels = FALSE, left_anchor = \"legal_abort_++\",                    plot_title = \"Affective preference of Democrats over Republicans\",                     color_palette = \"RdBu\", seed = 22) ResIN_out <- ResIN(Core_Items,                    node_vars = c(\"legal_abort\", \"equalize_incomes\", \"keep_immigrants\",                                  \"welfare_spending\", \"gay_marriage\", \"protect_environ\",                                  \"gun_control\", \"aid_blacks\"), node_covars = c(\"dem_bias\"),                    node_costats = c(\"mean\"), plot_whichstat = \"dem_bias_mean\",                    plot_responselabels = TRUE, left_anchor = \"legal_abort_++\",                    plot_title = \"Affective preference of Democrats over Republicans\",                     color_palette = \"RdBu\", seed = 22)"},{"path":"/articles/ResIN-VIGNETTE.html","id":"spacial-interpretation-and-individual-latent-space-scores","dir":"Articles","previous_headings":"","what":"Spacial interpretation and individual latent space scores","title":"ResIN Tutorial-Vignette","text":"Finally, let’s turn attention towards latent space ResIN networks embedded . indicated , ResIN combines belief network analysis latent variable modeling spatial location attitudes can interpreted underlying latent spectrum. Following Lüders (2024) core hypothesis, left-right location abstract network space correlates substantially people’s partisan identities animosities, strong reason believe ResIN network spatially captures liberal-conservative attitude spectrum. can access node location main spatial axis simply via ResIN_out\\$ResIN_nodeframe\\$x. Pearson correlations node location latent space partisanship democratic feelings thermometer bias 0.86 0.88, respectively, strongly suggest ResIN innately captures essence spatial-ideological divisions among American public. respondents ? ResIN() function can obtain scores survey-takers taking average node positions among attitude nodes given individual endorsed. (fancy scoring methods handle missing responses natively works likely published next package release.) spatial scores stored n\\*2 data-frame called ResIN_out\\$ResIN_scores; major axis scores appear scores_x minor axis component scores_y. correlations somewhat weaker, still support postulate.","code":"## Further attaching partisan identification Core_Items <- Core_Items %>% dplyr::mutate(partisan = as.numeric(recode(BrJSocPsychol_2024$Q13,                                         \"Democrat\" = 2,                                        \"Independent\" = 1,                                        \"Republican\" = 0)))  ResIN_out <- ResIN(Core_Items, node_vars = c(\"legal_abort\", \"equalize_incomes\",                                               \"keep_immigrants\", \"welfare_spending\",                                              \"gay_marriage\", \"protect_environ\",                                              \"gun_control\", \"aid_blacks\"),                    node_covars = c(\"dem_bias\", \"partisan\"), node_costats = c(\"mean\", \"mean\"),                    plot_ggplot = FALSE)  ## Loading the psych package to run the correlation test. if(!require(\"psych\")) install.packages('psych') #> Loading required package: psych library(psych) ## Partisanship corr.test(ResIN_out$ResIN_nodeframe$x, ResIN_out$ResIN_nodeframe$partisan_mean) #> Call:corr.test(x = ResIN_out$ResIN_nodeframe$x, y = ResIN_out$ResIN_nodeframe$partisan_mean) #> Correlation matrix  #> [1] 0.86 #> Sample Size  #> [1] 40 #> These are the unadjusted probability values. #>   The probability values  adjusted for multiple tests are in the p.adj object.  #> [1] 0 #>  #>  To see confidence intervals of the correlations, print with the short=FALSE option  ## Affective polarization corr.test(ResIN_out$ResIN_nodeframe$x, ResIN_out$ResIN_nodeframe$dem_bias_mean) #> Call:corr.test(x = ResIN_out$ResIN_nodeframe$x, y = ResIN_out$ResIN_nodeframe$dem_bias_mean) #> Correlation matrix  #> [1] 0.88 #> Sample Size  #> [1] 40 #> These are the unadjusted probability values. #>   The probability values  adjusted for multiple tests are in the p.adj object.  #> [1] 0 #>  #>  To see confidence intervals of the correlations, print with the short=FALSE option ## Partisanship at the individual level corr.test(Core_Items$partisan, ResIN_out$ResIN_scores$scores_x) #> Call:corr.test(x = Core_Items$partisan, y = ResIN_out$ResIN_scores$scores_x) #> Correlation matrix  #> [1] 0.57 #> Sample Size  #> [1] 402 #> These are the unadjusted probability values. #>   The probability values  adjusted for multiple tests are in the p.adj object.  #> [1] 0 #>  #>  To see confidence intervals of the correlations, print with the short=FALSE option  ## Affective polarization at the individual level corr.test(Core_Items$dem_bias, ResIN_out$ResIN_scores$scores_x) #> Call:corr.test(x = Core_Items$dem_bias, y = ResIN_out$ResIN_scores$scores_x) #> Correlation matrix  #> [1] 0.7 #> Sample Size  #> [1] 402 #> These are the unadjusted probability values. #>   The probability values  adjusted for multiple tests are in the p.adj object.  #> [1] 0 #>  #>  To see confidence intervals of the correlations, print with the short=FALSE option"},{"path":"/articles/ResIN-VIGNETTE.html","id":"bootstrapping","dir":"Articles","previous_headings":"","what":"Bootstrapping","title":"ResIN Tutorial-Vignette","text":"sets ResIN apart belief network models ability determine node location theoretically interpretable latent space. non-parametric method, however, rely closed-form probability distributions derive uncertainty bounds location estimates latent space. can one nevertheless estimate uncertainty around quantities? answer - might guessed section header - bootstrapping. DYI implementations bootstrapping quantities generated novel methods can relatively daunting, even experienced statistical programmers. Thankfully, ResIN package features native workflow form three neat little helper functions can significantly simplify process. canned bootstrapping procedure ResIN package involves following three steps: ResIN_boots_prepare() function prepares given ResIN-class object re-sampling. Additional parameters, n boots_type determine number iterations basic type bootstrapping procedure performed. Supported \"resample\" \"permute\"; former can used estimate uncertainty around point estimate latter reserved deriving null-hypothesis distributions parameters interest. name implies, ResIN_boots_execute() function executes prepped bootstrapping procedure. parallel option set TRUE, function exploits CPU parallelism via doSNOW engine. detect_cores also set TRUE, available CPU cores automatically employed. simulation concluded, ResIN_boots_extract() function delivers handy search--grab utility particular quantity interest. Simply specify unique search term, = \"x_scores\" function grab, concatenate, return instances desired quantity. even lazier information retrieval, setting summarize_results = TRUE lets summarize distribution extracted quantity across bootstrap iterations. Let’s run bootstrapping analysis estimate non-parametric uncertainty around estimated correlation coefficient attitude node location node-level mean partisan identification.  bootstrapped distribution shows positions latent space partisan identities indeed strongly robustly correlated.","code":"## Let's generate a new, more lean ResIN analysis by omitting network statistics calculations,  ## plot generation, and individual-level scoring. This will optimize the execution time. ResIN_out <- ResIN(Core_Items, node_vars = c(\"legal_abort\", \"equalize_incomes\",                                               \"keep_immigrants\", \"welfare_spending\",                                              \"gay_marriage\", \"protect_environ\",                                              \"gun_control\", \"aid_blacks\"),                     node_covars = c(\"partisan\"), node_costats = c(\"mean\"),                     left_anchor = \"legal_abort_++\", network_stats = FALSE,                    generate_ggplot = FALSE, plot_ggplot = FALSE,                    ResIN_scores = FALSE, detect_clusters = FALSE)  ResIN_prepped <- ResIN_boots_prepare(ResIN_out, n = 1000, boots_type = \"resample\")  ## Running the bootstrap might take a while; uncomment to try yourself # ResIN_executed <- ResIN_boots_execute(ResIN_prepped, parallel = TRUE, n_cores = 2L) #  # saveRDS(ResIN_executed, \"ResIN_executed.RDS\") ResIN_executed <- readRDS(\"ResIN_executed.RDS\")  ## Extracting the mean level partisanship per node across all iterations partisan_means <- ResIN_boots_extract(ResIN_executed, what = \"partisan_mean\")  ## Extracting the node-level latent space coordinate across all iterations x_postions <- ResIN_boots_extract(ResIN_executed, what = \"x\")  ## Correlating each list element and storing results in a new vector correlations <- list() for(i in 1:length(partisan_means)){   correlations[[i]] <- cor(partisan_means[[i]], x_postions[[i]]) }  correlations <- unlist(correlations)  ## Ignoring a handful few results where left and right are still flipped correlations[correlations<(-0.75)] <- NA  summary(correlations) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.8538  0.8577  0.8591  0.8592  0.8606  0.8676      63  ## Let's plot the result with 95% CI lines: correlations <- as.data.frame(correlations) prob_lines <- quantile(correlations$correlations, c(0.025,0.5, 0.975), na.rm=TRUE)   if(!require(\"ggplot2\")) install.packages('ggplot2') library(ggplot2) ggplot(correlations, aes(x = correlations))+   geom_density(fill = \"lightblue\")+   ggtitle(\"Density of bootstrapped correlations between node position and partisanship\")+   labs(y = \"Probability density\", x = \"Correlation between ResIN attitude node         position and average partisan identity\")+   geom_vline(xintercept = prob_lines[1], color = \"darkred\",linetype = 2)+   geom_vline(xintercept = prob_lines[2], color = \"black\",linetype = 2, size = 1)+   geom_vline(xintercept = prob_lines[3], color = \"darkred\",linetype = 2)+   xlim(c(0.85, 0.87))+   theme_classic()"},{"path":"/articles/ResIN-VIGNETTE.html","id":"export-resin-graphs-to-qgraph-igraph-and-gephi","dir":"Articles","previous_headings":"","what":"Export ResIN graphs to qgraph, igraph, and gephi","title":"ResIN Tutorial-Vignette","text":"familiar statistical network software suits - either R elsewhere - ’ll likely appreciate converter functions ship ResIN package. moment, ResIN_to_igraph(), ResIN_to_qgraph(), ResIN_to_gephi() handle conversions igraph, qgraph, Gephi, respectively.","code":"## Easily convert a ResIN object to igraph: ResIN_igraph <- ResIN_to_igraph(ResIN_out) class(ResIN_igraph) #> [1] \"igraph\"  ResIN_qgraph <- ResIN_to_qgraph(ResIN_out) class(ResIN_qgraph) #> [1] \"qgraph\"  # ResIN_to_gephi(ResIN_out, file = \"ResIN_gephi.csv\")"},{"path":"/articles/ResIN-VIGNETTE.html","id":"summary-other-features","dir":"Articles","previous_headings":"","what":"Summary & other features","title":"ResIN Tutorial-Vignette","text":"ResIN() lot offer hope ’ll enjoy experimenting additional features covered brief tutorial. instance, ResIN() natively supports analysis survey weights (see weights-argument), LASSO-regularization via EBICglasso(), automatic removal non-significant edges (remove_nonsignificant), . Please feel free reach team developers https://www.resinmethod.net/ leave comments feedback. hope enjoyed tutorial ’ll give ResIN() try next project.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philip Warncke. Maintainer, author. Dino Carpentras. Author. Adrian Lüders. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Warncke P, Carpentras D, Lüders (2024). ResIN: Response Item Networks ('ResIN'). R package version 2.0.0, https://github.com/pwarncke77/ResIN.","code":"@Manual{,   title = {ResIN: Response Item Networks ('ResIN')},   author = {Philip Warncke and Dino Carpentras and Adrian Lüders},   year = {2024},   note = {R package version 2.0.0},   url = {https://github.com/pwarncke77/ResIN}, }"},{"path":"/index.html","id":"resin","dir":"","previous_headings":"","what":"Response Item Networks (ResIN)","title":"Response Item Networks (ResIN)","text":"Response-Item Networks (ResIN) Package R Maintainer: Philip Warncke pwarncke@live.unc.edu Authors: Philip Warncke, Dino Carpentras, Adrian Lüders Description: Contains various tools estimate visualize Response Item Networks (ResIN’s). ResIN binarizes ordered-categorical qualitative response choices (survey) data, calculates pairwise associations maps location item response node force-directed network. Please refer https://www.resinmethod.net/ details. License: GPL-3","code":""},{"path":"/reference/BrJSocPsychol_2024.html","id":null,"dir":"Reference","previous_headings":"","what":"Source data for Lüders, A., Carpentras, D. and Quayle, M., 2024. Attitude networks as intergroup realities: Using network‐modelling to research attitude‐identity relationships in polarized political contexts. British Journal of Social Psychology, 63(1), pp.37-51. — BrJSocPsychol_2024","title":"Source data for Lüders, A., Carpentras, D. and Quayle, M., 2024. Attitude networks as intergroup realities: Using network‐modelling to research attitude‐identity relationships in polarized political contexts. British Journal of Social Psychology, 63(1), pp.37-51. — BrJSocPsychol_2024","text":"sample N = 402 paid participants crowd working platform Prolific Academic. core survey consists set eight political attitude items abortion, immigration, gun control, gay marriage. item followed 5-point scale ranging strong disagreement strong agreement. survey also includes items partisanship, affective polarization, short vignette experiment.","code":""},{"path":"/reference/BrJSocPsychol_2024.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source data for Lüders, A., Carpentras, D. and Quayle, M., 2024. Attitude networks as intergroup realities: Using network‐modelling to research attitude‐identity relationships in polarized political contexts. British Journal of Social Psychology, 63(1), pp.37-51. — BrJSocPsychol_2024","text":"","code":"data(BrJSocPsychol_2024)"},{"path":"/reference/BrJSocPsychol_2024.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Source data for Lüders, A., Carpentras, D. and Quayle, M., 2024. Attitude networks as intergroup realities: Using network‐modelling to research attitude‐identity relationships in polarized political contexts. British Journal of Social Psychology, 63(1), pp.37-51. — BrJSocPsychol_2024","text":"object class \"data.frame\"","code":""},{"path":"/reference/BrJSocPsychol_2024.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Source data for Lüders, A., Carpentras, D. and Quayle, M., 2024. Attitude networks as intergroup realities: Using network‐modelling to research attitude‐identity relationships in polarized political contexts. British Journal of Social Psychology, 63(1), pp.37-51. — BrJSocPsychol_2024","text":"dataset made available Lüders et.al. 2024.","code":""},{"path":"/reference/BrJSocPsychol_2024.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Source data for Lüders, A., Carpentras, D. and Quayle, M., 2024. Attitude networks as intergroup realities: Using network‐modelling to research attitude‐identity relationships in polarized political contexts. British Journal of Social Psychology, 63(1), pp.37-51. — BrJSocPsychol_2024","text":"","code":"data(BrJSocPsychol_2024) head(BrJSocPsychol_2024) #> # A tibble: 6 × 234 #>   StartDate  EndDate Progress Duration (in seconds…¹ Finished RecordedDate Q7    #>   <chr>      <chr>   <chr>    <chr>                  <chr>    <chr>        <chr> #> 1 44385.536… 44385.… 100      519                    True     44385.54235… Yes   #> 2 44385.544… 44385.… 100      358                    True     44385.54872… Yes   #> 3 44385.551… 44385.… 100      524                    True     44385.55780… Yes   #> 4 44385.557… 44385.… 100      414                    True     44385.56237… Yes   #> 5 44385.558… 44385.… 100      630                    True     44385.56588… Yes   #> 6 44385.566… 44385.… 100      265                    True     44385.56952… Yes   #> # ℹ abbreviated name: ¹​`Duration (in seconds)` #> # ℹ 227 more variables: Q9_1 <chr>, Q9_2 <chr>, Q9_3 <chr>, Q9_4 <chr>, #> #   Q9_5 <chr>, Q9_6 <chr>, Q9_7 <chr>, Q9_8 <chr>, Q11 <chr>, Q13 <chr>, #> #   Q17_1 <chr>, Q17_2 <chr>, Q17_3 <chr>, Q15_1 <chr>, Q15_2 <chr>, #> #   Q15_3 <chr>, Abort1_dem_1 <chr>, Abort1_rep_1 <chr>, Abort1_neu_1 <chr>, #> #   Abort1_feel_1 <chr>, Abort1_proto_1 <chr>, Abort2_dem_1 <chr>, #> #   Abort2_rep_1 <chr>, Abort2_neu_1 <chr>, Abort2_feel_1 <chr>, …"},{"path":"/reference/lik_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Likert-type simulated data for ","title":"Likert-type simulated data for ","text":"artificially created data-set (n=1000) 12, 5-point Likert data. Modeled basis standard normal data-generating process. Likert scales contain 20 percent uncorrelated, homoscedastic measurement error. data-set used examples \"ResIN\" package vignette.","code":""},{"path":"/reference/lik_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likert-type simulated data for ","text":"","code":"data(lik_data)"},{"path":"/reference/lik_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Likert-type simulated data for ","text":"object class \"data.frame\"","code":""},{"path":"/reference/lik_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Likert-type simulated data for ","text":"data set artificially created ResIN package.","code":""},{"path":"/reference/lik_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likert-type simulated data for ","text":"","code":"data(lik_data) head(lik_data) #>   Item_1 Item_2 Item_3 Item_4 Item_5 Item_6 Item_7 Item_8 Item_9 Item_10 #> 1      4      4      4      5      4      5      3      5      5       5 #> 2      2      2      3      1      3      4      1      3      1       3 #> 3      3      2      4      4      3      5      2      3      2       5 #> 4      3      2      4      5      3      5      2      4      3       5 #> 5      3      2      4      3      3      5      2      3      3       5 #> 6      2      2      3      1      3      5      1      3      2       4 #>   Item_11 Item_12 #> 1       5       5 #> 2       1       3 #> 3       1       4 #> 4       3       5 #> 5       2       4 #> 6       1       3"},{"path":"/reference/ResIN.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN — ResIN","title":"ResIN — ResIN","text":"Performs Response Item-Network (ResIN) analysis","code":""},{"path":"/reference/ResIN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN — ResIN","text":"","code":"ResIN(   df,   node_vars = NULL,   left_anchor = NULL,   cor_method = \"auto\",   weights = NULL,   method_wCorr = \"Polychoric\",   poly_ncor = 2,   neg_offset = 0,   ResIN_scores = TRUE,   remove_negative = TRUE,   EBICglasso = FALSE,   EBICglasso_arglist = NULL,   remove_nonsignificant = FALSE,   sign_threshold = 0.05,   node_covars = NULL,   node_costats = NULL,   network_stats = TRUE,   detect_clusters = FALSE,   cluster_method = NULL,   cluster_arglist = NULL,   cluster_assignment = TRUE,   seed = NULL,   generate_ggplot = TRUE,   plot_ggplot = TRUE,   plot_whichstat = NULL,   plot_edgestat = NULL,   color_palette = \"RdBu\",   plot_responselabels = TRUE,   response_levels = NULL,   plot_title = NULL,   save_input = TRUE )"},{"path":"/reference/ResIN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN — ResIN","text":"df data-frame object containing raw data. node_vars optional character vector detailing attitude item columns selected ResIN analysis (.e. subset attitude variables df). left_anchor optional character scalar indicating particular response node determines spatial orientation ResIN latent space. response node appear left-hand side, x-plane inverted. ensures consistent interpretation latent space across multiple iterations (e.g. bootstrapping analysis). Defaults NULL (adjustment orientation taken.) cor_method correlation method used? Defaults \"auto\" applies cor_auto function qgraph package. Possible arguments \"auto\", \"pearson\", \"kendall\", \"spearman\". weights optional continuous vector survey weights. length number observations df. weights provided, weighted correlation matrix estimated weightedCorr function wCorr package. method_wCorr weights supplied, method weighted correlations used? Defaults \"Polychoric\". See wCorr::weightedCorr correlation options. poly_ncor many CPU cores used estimate polychoric correlation matrix? used cor_method = \"polychoric\". neg_offset negative correlations offset avoid small correlation pairs disappearing? Defaults 0. positive number 0 1 may supplied instead. ResIN_scores spatial scores calculated every individual. Defaults TRUE. Function obtains mean positional score major (x-axis) minor (y-axis). versions package include sophisticated scoring techniques. remove_negative negative correlations removed? Defaults TRUE (highly recommended). Setting FALSE makes impossible estimate force-directed network layout. Function use igraph::layout_nicely instead. EBICglasso sparse, Gaussian-LASSO ResIN network estimated? Defaults FALSE. set TRUE, EBICglasso function qgraph packages performs regularization (nearest positive-semi-definite) ResIN correlation matrix. EBICglasso_arglist argument list feeding additional instructions EBICglasso function EBICglasso set TRUE. remove_nonsignificant Optionally, non-significant edges removed ResIN network? Defaults FALSE. Note option incompatible EBICglasso weighted correlations. sign_threshold p-value threshold non-significant edges removed? Defaults 0.05. node_covars optional character string selecting quantitative covariates can used enhance ResIN analysis. Typically, covariates provide grouped summary statistics item response nodes. (E.g.: average age income level respondents selected particular item response?) Variable names specified match existing columns df. node_costats node_covars selected, summary statistics estimated ? Argument character vector call base-R function. (E.g. \"mean\", \"median\", \"sd\"). element specified node_costats applied element node_covars -put stored node-level summary statistic ResIN_nodeframe. extra columns ResIN_nodeframe labeled according following template: \"covariate name\"_\"statistic\". respondents mean age, corresponding column ResIN_nodeframe labeled \"age_mean\". network_stats common node- graph level network statistics extracted? Calls qgraph::centrality_auto DirectedClustering::ClustF ResIN graph object extract node-level betweenness, closeness, strength centrality, well mean standard deviation scores network level. Also estimates network expected influence, average path length, global clustering coefficients. Defaults TRUE. Set FALSE estimation takes long time. detect_clusters Optional, community detection performed item response network? Defaults FALSE. set TRUE, performs clustering method [igraph](https://igraph.org/r/doc/cluster_leading_eigen.html) library stores results ResIN_nodeframe output. cluster_method character scalar specifying [igraph-based](https://igraph.org/r/doc/communities.html) community detection function. cluster_arglist optional list specifying additional arguments selected [igraph](https://igraph.org/r/doc/communities.html) clustering method. cluster_assignment individual (survey) respondents assigned different clusters? set TRUE, function generate n*c matrix probabilities respondent assigned one c clusters. Furthermore, vector length n generated displaying likely cluster respondents belong . case tie one clusters, small amount random noise determines assignment. matrix vectors added aux_objects list. Defaults FALSE ignored detect_clusters set FALSE. seed Random seed force-directed algorithm. Defaults NULL (seed set.) scalar integer supplied, seed set prior analysis. generate_ggplot ggplot-based visualization ResIN network generated? Defaults TRUE. plot_ggplot basic ggplot ResIN network plotted? Defaults TRUE. plot_whichstat particular node-level metric color-visualized ggplot output? node cluster, specify \"cluster\". Likert response choices options, specify \"choices\". particular node-level co-variate please specify name particular element node_covars followed \"_\" specific node_costats like visualize. instance want visualize average age node-level, specify \"age_mean\". colorize node centrality statistics, possible choices \"Strength\", \"Betweenness\", \"Closeness\", \"ExpectedInfluence\". Defaults NULL. Make sure supply appropriate choices node_covars, node_costats, detect_clusters, /network_stats prior setting argument. plot_edgestat thickness edges adjusted according particular co-statistic? Defaults NULL. Possible choices \"weights\" bi-variate correlation strength, \"edgebetweenness\" color_palette Optionally, may specify ggplot2 color palette applied plot. options contained [RColorBrewer](https://cran.r-project.org/web/packages/RColorBrewer/RColorBrewer.pdf) (discrete colors cluster assignments) [ggplot2::scale_colour_distiller](https://ggplot2.tidyverse.org/reference/scale_brewer.html) supported. Defaults \"RdBu\". plot_responselabels response labels plotted via geom_text? Defaults TRUE. recommended set FALSE network possesses lot nodes /long response choice names. response_levels optional character vector specifying correct order global response levels. useful node-items follow convention (e.g. ranging \"strong disagreement\" \"strong agreement\"). supplied vector length total number response options supply (matching exactly) correct order. E.g. c(\"Strongly Agree\", \"Somewhat Agree\", \"Neutral\", \"Somewhat Disagree\", \"Strongly Disagree\"). Defaults NULL. plot_title Optionally, character scalar specifying title ggplot output. Defaults \"ResIN plot\". save_input Optionally, input data function arguments saved (necessary running ResIN_boots_prepare function). Defaults TRUE.","code":""},{"path":"/reference/ResIN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN — ResIN","text":"edge-list type data-frame, ResIN_edgelist, node-level data-frame, ResIN_nodeframe, n*2 data-frame individual-level spatial scores along major (x) minor(y) axis, ResIN_scores list graph-level statistics graph_stats including (graph_structuration) centralization (graph_centralization), well list auxiliary objects, aux_objects, including ResIN adjacency matrix (adj_matrix), numeric vector detailing item responses belong item (same_items), dummy-coded item-response data-frame (df_dummies).","code":""},{"path":"/reference/ResIN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN — ResIN","text":"","code":"## Load the 12-item simulated Likert-type toy dataset data(lik_data)  # Apply the ResIN function to toy Likert data: ResIN_obj <- ResIN(lik_data, cor_method = \"spearman\", network_stats = TRUE, detect_clusters = TRUE)"},{"path":"/reference/ResIN_boots_execute.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_boots_execute — ResIN_boots_execute","title":"ResIN_boots_execute — ResIN_boots_execute","text":"Execute prepared ResIN bootstrap analysis","code":""},{"path":"/reference/ResIN_boots_execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_boots_execute — ResIN_boots_execute","text":"","code":"ResIN_boots_execute(   ResIN_boots_prepped,   parallel = FALSE,   detect_cores = TRUE,   core_offset = 0L,   n_cores = 2L,   inorder = FALSE )"},{"path":"/reference/ResIN_boots_execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_boots_execute — ResIN_boots_execute","text":"ResIN_boots_prepped list prepared ResIN objects bootstrapping (outcome ResIN_boots_prepare function) parallel function executed parallel using foreach package? Defaults FALSE. FALSE, function execute sequentially simple loop. detect_cores number available CPU cores automatically detected? Defaults TRUE ignored parallel set FALSE. core_offset Optionally, specify positive integer offset subtracted number automatically detected cores. Defaults 0L. n_cores Manually specify number available CPU cores. Defaults 2L ignored detect_cores set TRUE parallel set FALSE. inorder parallel execution done sequential order ResIN_boots_prepped object?","code":""},{"path":"/reference/ResIN_boots_execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_boots_execute — ResIN_boots_execute","text":"list object containing n (bootstrapped) ResIN list objects.","code":""},{"path":"/reference/ResIN_boots_execute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_boots_execute — ResIN_boots_execute","text":"","code":"## Load the 12-item simulated Likert-type toy dataset data(lik_data)  # Apply the ResIN function to toy Likert data: ResIN_obj <- ResIN(lik_data, cor_method = \"spearman\", network_stats = TRUE,                       generate_ggplot = FALSE) #> [1] \"not generated\"  if (FALSE) { # Prepare for bootstrapping prepped_boots <- ResIN_boots_prepare(ResIN_obj, n=5000, boots_type=\"permute\")  # Execute the prepared bootstrap list executed_boots <-  ResIN_boots_execute(prepped_boots, parallel = TRUE, detect_cores = TRUE)  # Extract results - here for example, the network (global)-clustering coefficient ResIN_boots_extract(executed_boots, what = \"global_clustering\", summarize_results = TRUE) }"},{"path":"/reference/ResIN_boots_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_boots_extract — ResIN_boots_extract","title":"ResIN_boots_extract — ResIN_boots_extract","text":"Extract summarize quantities bootstrapped ResIN objects","code":""},{"path":"/reference/ResIN_boots_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_boots_extract — ResIN_boots_extract","text":"","code":"ResIN_boots_extract(ResIN_boots_executed, what, summarize_results = FALSE)"},{"path":"/reference/ResIN_boots_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_boots_extract — ResIN_boots_extract","text":"ResIN_boots_executed list prepared ResIN objects bootstrapping (outcome ResIN_boots_executed function) character vector length one specifying target quantity interest. one--one match corresponding output vector (scalar) among bootstrapped result list (see ResIN_boots_execute). participants' position x-axis ResIN latent space, example, specify \"scores_x\". summarize_results extracted quantities summarized series descriptive statistics? set true, minimum, maximum, mean, selected quantiles, standard deviation reported. set FALSE (default), extracted quantities instead returned list.","code":""},{"path":"/reference/ResIN_boots_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_boots_extract — ResIN_boots_extract","text":"list object containing n (bootstrapped) ResIN list objects.","code":""},{"path":"/reference/ResIN_boots_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_boots_extract — ResIN_boots_extract","text":"","code":"## Load the 12-item simulated Likert-type toy dataset data(lik_data)  # Apply the ResIN function to toy Likert data: ResIN_obj <- ResIN(lik_data, cor_method = \"spearman\", network_stats = TRUE,                       generate_ggplot = FALSE) #> [1] \"not generated\"  if (FALSE) { # Prepare for bootstrapping prepped_boots <- ResIN_boots_prepare(ResIN_obj, n=5000, boots_type=\"permute\")  # Execute the prepared bootstrap list executed_boots <-  ResIN_boots_execute(prepped_boots, parallel = TRUE, detect_cores = TRUE)  # Extract results - here for example, the network (global)-clustering coefficient ResIN_boots_extract(executed_boots, what = \"global_clustering\", summarize_results = TRUE) }"},{"path":"/reference/ResIN_boots_prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_boots_prepare — ResIN_boots_prepare","title":"ResIN_boots_prepare — ResIN_boots_prepare","text":"Prepare ResIN-based bootstrap analysis","code":""},{"path":"/reference/ResIN_boots_prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_boots_prepare — ResIN_boots_prepare","text":"","code":"ResIN_boots_prepare(   ResIN_object,   n = 10000,   boots_type = \"resample\",   resample_size = NULL,   save_input = FALSE,   seed = 42 )"},{"path":"/reference/ResIN_boots_prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_boots_prepare — ResIN_boots_prepare","text":"ResIN_object ResIN object prepare bootstrapping workflow. n Bootstrapping sample size. Defaults 10.000. boots_type kind bootstrapping performed? set \"resample\", function performs row-wise re-sampling raw data (useful e.g., sensitivity power analysis). set \"permute\", function randomly reshuffle raw item responses (useful e.g., simulating null-hypothesis distributions). Defaults \"resample\". resample_size Optional parameter determining sample size boots_type set \"resample\". Defaults number rows raw data. save_input input information bootstrap iteration (including re-sampled/permuted data) stored. Set FALSE default save lot memory disk storage. seed Random seed bootstrap samples","code":""},{"path":"/reference/ResIN_boots_prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_boots_prepare — ResIN_boots_prepare","text":"list object containing n re-sampled permuted copies raw data, along list instructions perform ResIN analysis outputs generate.","code":""},{"path":"/reference/ResIN_boots_prepare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_boots_prepare — ResIN_boots_prepare","text":"","code":"## Load the 12-item simulated Likert-type toy dataset data(lik_data)  # Apply the ResIN function to toy Likert data: ResIN_obj <- ResIN(lik_data, cor_method = \"spearman\", network_stats = TRUE,                       generate_ggplot = FALSE) #> [1] \"not generated\"  if (FALSE) { # Prepare for bootstrapping prepped_boots <- ResIN_boots_prepare(ResIN_obj, n=5000, boots_type=\"permute\")  # Execute the prepared bootstrap list executed_boots <-  ResIN_boots_execute(prepped_boots, parallel = TRUE, detect_cores = TRUE)  # Extract results - here for example, the network (global)-clustering coefficient ResIN_boots_extract(executed_boots, what = \"global_clustering\", summarize_results = TRUE) }"},{"path":"/reference/ResIN_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_igraph — ResIN_igraph","title":"ResIN_igraph — ResIN_igraph","text":"Performs Response Item-Network analysis (ResIN) exports results igraph object.","code":""},{"path":"/reference/ResIN_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_igraph — ResIN_igraph","text":"","code":"ResIN_igraph(   df,   node_vars = NULL,   cor_method = \"auto\",   weights = NULL,   method_wCorr = \"Polychoric\",   remove_negative = TRUE,   igraph_arglist = NULL,   EBICglasso = FALSE,   EBICglasso_arglist = NULL,   cluster = TRUE,   seed = 42 )"},{"path":"/reference/ResIN_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_igraph — ResIN_igraph","text":"df data-frame object containing raw data. node_vars optional character string detailing attitude item columns selected ResIN analysis (.e. subset attitude variables df). cor_method correlation method used? Defaults \"auto\" applies cor_auto function qgraph package. Possible arguments \"auto\", \"pearson\", \"kendall\", \"spearman\". weights optional continuous vector survey weights. length number observations df. weights provided, weighted correlation matrix estimated weightedCorr function wCorr package. method_wCorr weights supplied, method weighted correlations used? Defaults \"Polychoric\". See wCorr::weightedCorr correlation options. remove_negative negative correlations removed? Defaults TRUE (highly recommended). Setting FALSE makes impossible estimate force-directed network layout. Function use igraph::layout_nicely instead. igraph_arglist optional argument list feeding additional instructions igraph. Needs specified object list containing arguments passed . EBICglasso sparse, Gaussian-LASSO ResIN network estimated? Defaults FALSE. set TRUE, EBICglasso function qgraph packages performs regularization (nearest positive-semi-definite) ResIN correlation matrix. EBICglasso_arglist argument list feeding additional instructions EBICglasso function EBICglasso set TRUE. cluster Optional, community detection performed item response network? Defaults FALSE. set TRUE, performs \"cluster_leading_eigen\" function igraph package stores results plotting_frame. seed Random seed force-directed algorithm.","code":""},{"path":"/reference/ResIN_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_igraph — ResIN_igraph","text":"list object containing igraph output object, numeric vector detailing item responses belong item (same_items), optionally matrix detailing community membership different item nodes (clustering).","code":""},{"path":"/reference/ResIN_igraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ResIN_igraph — ResIN_igraph","text":"Csardi G, Nepusz T (2006). “igraph software package complex network research.” InterJournal, Complex Systems, 1695. https://igraph.org.","code":""},{"path":"/reference/ResIN_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_igraph — ResIN_igraph","text":"","code":"## Load the 12-item simulated Likert-type ResIN toy dataset data(lik_data)  ## Run the function: # \\donttest{ ResIN_igraph <-  ResIN_igraph(lik_data) #> Variables detected as ordinal: Item_1_1; Item_1_2; Item_1_3; Item_1_4; Item_1_5; Item_2_1; Item_2_2; Item_2_3; Item_2_4; Item_2_5; Item_3_1; Item_3_2; Item_3_3; Item_3_4; Item_3_5; Item_4_1; Item_4_2; Item_4_3; Item_4_4; Item_4_5; Item_5_1; Item_5_2; Item_5_3; Item_5_4; Item_5_5; Item_6_1; Item_6_2; Item_6_3; Item_6_4; Item_6_5; Item_7_1; Item_7_2; Item_7_3; Item_7_4; Item_7_5; Item_8_1; Item_8_2; Item_8_3; Item_8_4; Item_8_5; Item_9_1; Item_9_2; Item_9_3; Item_9_4; Item_9_5; Item_10_1; Item_10_2; Item_10_3; Item_10_4; Item_10_5; Item_11_1; Item_11_2; Item_11_3; Item_11_4; Item_11_5; Item_12_1; Item_12_2; Item_12_3; Item_12_4; Item_12_5   ## Plot and/or investigate as you wish: igraph::plot.igraph(ResIN_igraph$igraph_obj)  # }"},{"path":"/reference/ResIN_qgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_qgraph — ResIN_qgraph","title":"ResIN_qgraph — ResIN_qgraph","text":"Performs Response Item-Network analysis (ResIN) exports results qgraph object.","code":""},{"path":"/reference/ResIN_qgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_qgraph — ResIN_qgraph","text":"","code":"ResIN_qgraph(   df,   node_vars = NULL,   cor_method = \"auto\",   weights = NULL,   method_wCorr = \"Polychoric\",   remove_negative = TRUE,   plot_graph = TRUE,   plot_title = \"ResIN qgraph\",   qgraph_arglist = NULL,   EBICglasso = TRUE,   EBICglasso_arglist = NULL,   same_item_groups = FALSE,   cluster = FALSE )"},{"path":"/reference/ResIN_qgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_qgraph — ResIN_qgraph","text":"df data-frame object containing raw data. node_vars optional character string detailing attitude item columns selected ResIN analysis (.e. subset attitude variables df). cor_method correlation method used? Defaults \"auto\" applies cor_auto function qgraph package. Possible arguments \"auto\", \"pearson\", \"kendall\", \"spearman\". weights optional continuous vector survey weights. length number observations df. weights provided, weighted correlation matrix estimated weightedCorr function wCorr package. method_wCorr weights supplied, method weighted correlations used? Defaults \"Polychoric\". See wCorr::weightedCorr correlation options. remove_negative negative correlations removed? Defaults TRUE (highly recommended). Setting FALSE makes impossible estimate force-directed network layout. Function use igraph::layout_nicely instead. plot_graph Optionally, qgraph generate print network upon generation? Defaults TRUE. plot_title Optionally, assign title qgraph plot. qgraph_arglist optional argument list feeding additional instructions qgraph. Needs specified object list containing arguments passed . EBICglasso sparse, Gaussian-LASSO ResIN network estimated? Defaults FALSE. set TRUE, EBICglasso function qgraph packages performs regularization (nearest positive-semi-definite) ResIN correlation matrix. EBICglasso_arglist argument list feeding additional instructions EBICglasso function EBICglasso set TRUE. Needs specified object list containing arguments passed . same_item_groups Optionally, qgraph object automatically incorporate \"group\" attribute groups item response nodes items repose nodes stem ? cluster Optional, community detection performed item response network? Defaults FALSE. set TRUE, performs \"cluster_leading_eigen\" function igraph package stores results plotting_frame.","code":""},{"path":"/reference/ResIN_qgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_qgraph — ResIN_qgraph","text":"list object containing qgraph output object, numeric vector detailing item responses belong item (same_items), optionally matrix detailing community membership different item nodes (clustering).","code":""},{"path":"/reference/ResIN_qgraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ResIN_qgraph — ResIN_qgraph","text":"Epskamp S, Cramer AOJ, Waldorp LJ, Schmittmann VD, Borsboom D (2012). “qgraph: Network Visualizations Relationships Psychometric Data.” Journal Statistical Software, 48(4), 1–18.","code":""},{"path":"/reference/ResIN_qgraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_qgraph — ResIN_qgraph","text":"","code":"# \\donttest{ ## Load the 12-item simulated Likert-type ResIN toy dataset data(lik_data)  ## Run the function: ResIN_qgraph <-  ResIN_qgraph(lik_data, same_item_groups = TRUE) #> Variables detected as ordinal: Item_1_1; Item_1_2; Item_1_3; Item_1_4; Item_1_5; Item_2_1; Item_2_2; Item_2_3; Item_2_4; Item_2_5; Item_3_1; Item_3_2; Item_3_3; Item_3_4; Item_3_5; Item_4_1; Item_4_2; Item_4_3; Item_4_4; Item_4_5; Item_5_1; Item_5_2; Item_5_3; Item_5_4; Item_5_5; Item_6_1; Item_6_2; Item_6_3; Item_6_4; Item_6_5; Item_7_1; Item_7_2; Item_7_3; Item_7_4; Item_7_5; Item_8_1; Item_8_2; Item_8_3; Item_8_4; Item_8_5; Item_9_1; Item_9_2; Item_9_3; Item_9_4; Item_9_5; Item_10_1; Item_10_2; Item_10_3; Item_10_4; Item_10_5; Item_11_1; Item_11_2; Item_11_3; Item_11_4; Item_11_5; Item_12_1; Item_12_2; Item_12_3; Item_12_4; Item_12_5  # }"},{"path":"/reference/ResIN_to_gephi.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_to_gephi — ResIN_to_gephi","title":"ResIN_to_gephi — ResIN_to_gephi","text":"Saves ResIN graph series csv files readable Gephi. Source code taken RMHogervorst / gephi","code":""},{"path":"/reference/ResIN_to_gephi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_to_gephi — ResIN_to_gephi","text":"","code":"ResIN_to_gephi(ResIN_object, file = \"ResIN_gephi.csv\")"},{"path":"/reference/ResIN_to_gephi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_to_gephi — ResIN_to_gephi","text":"ResIN_object output ResIN function (list class ResIN). file name .csv extension Gephi readable file output . Defaults \"ResIN_gephi.csv\".","code":""},{"path":"/reference/ResIN_to_gephi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_to_gephi — ResIN_to_gephi","text":"series csv files readable Gephi","code":""},{"path":"/reference/ResIN_to_gephi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ResIN_to_gephi — ResIN_to_gephi","text":"Source code taken : https://github.com/RMHogervorst/gephi?tab=MIT-1-ov-file#readme","code":""},{"path":"/reference/ResIN_to_gephi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_to_gephi — ResIN_to_gephi","text":"","code":"if (FALSE) { ## Load the 12-item simulated Likert-type ResIN toy dataset data(lik_data)  ## Run the function: ResIN_to_gephi(ResIN(lik_data), file = \"ResIN_gephi.csv\") }"},{"path":"/reference/ResIN_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_to_igraph — ResIN_to_igraph","title":"ResIN_to_igraph — ResIN_to_igraph","text":"Transforms output ResIN function [igraph](https://igraph.org/r/doc/cluster_leading_eigen.html) object","code":""},{"path":"/reference/ResIN_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_to_igraph — ResIN_to_igraph","text":"","code":"ResIN_to_igraph(ResIN_object, igraph_arglist = NULL)"},{"path":"/reference/ResIN_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_to_igraph — ResIN_to_igraph","text":"ResIN_object output ResIN function (list class ResIN). igraph_arglist optional argument list supplied igraph::graph_from_adjacency_matrix function. NULL, default : list(mode = \"undirected\", weighted = TRUE, diag = FALSE).","code":""},{"path":"/reference/ResIN_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_to_igraph — ResIN_to_igraph","text":"class igraph object.","code":""},{"path":"/reference/ResIN_to_igraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ResIN_to_igraph — ResIN_to_igraph","text":"Csardi G, Nepusz T (2006). “igraph software package complex network research.” InterJournal, Complex Systems, 1695. https://igraph.org.","code":""},{"path":"/reference/ResIN_to_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_to_igraph — ResIN_to_igraph","text":"","code":"## Load the 12-item simulated Likert-type ResIN toy dataset data(lik_data)  ## Run the function: # \\donttest{ igraph_output <-  ResIN_to_igraph(ResIN(lik_data))    ## Plot and/or investigate as you wish: igraph::plot.igraph(igraph_output)  # }"},{"path":"/reference/ResIN_to_qgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_to_qgraph — ResIN_to_qgraph","title":"ResIN_to_qgraph — ResIN_to_qgraph","text":"Transforms output ResIN function qgraph object","code":""},{"path":"/reference/ResIN_to_qgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_to_qgraph — ResIN_to_qgraph","text":"","code":"ResIN_to_qgraph(ResIN_object, qgraph_arglist = NULL)"},{"path":"/reference/ResIN_to_qgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_to_qgraph — ResIN_to_qgraph","text":"ResIN_object output ResIN function (list class ResIN). qgraph_arglist optional argument list supplied igraph::graph_from_adjacency_matrix function. NULL, defaults : list(layout = \"spring\", maximum = 1, vsize = 6, DoNotPlot = TRUE, sampleSize = nrow(df_nodes), mar = c(3,3,3,3), normalize = FALSE)","code":""},{"path":"/reference/ResIN_to_qgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_to_qgraph — ResIN_to_qgraph","text":"[qgraph]https://cran.r-project.org/web/packages/qgraph/index.html graph object.","code":""},{"path":"/reference/ResIN_to_qgraph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ResIN_to_qgraph — ResIN_to_qgraph","text":"Epskamp S, Cramer AOJ, Waldorp LJ, Schmittmann VD, Borsboom D (2012). “qgraph: Network Visualizations Relationships Psychometric Data.” Journal Statistical Software, 48(4), 1–18.","code":""},{"path":"/reference/ResIN_to_qgraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_to_qgraph — ResIN_to_qgraph","text":"","code":"# \\donttest{ ## Load the 12-item simulated Likert-type ResIN toy dataset data(lik_data)  ## Run the function: ResIN_qgraph <-  ResIN_to_qgraph(ResIN(lik_data))  # }"},{"path":"/reference/ResIN_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"ResIN_utils — ResIN_utils","title":"ResIN_utils — ResIN_utils","text":"Generates auxiliary utensils useful Response-Item Networks analysis.","code":""},{"path":"/reference/ResIN_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResIN_utils — ResIN_utils","text":"","code":"ResIN_utils(   df,   node_vars = NULL,   cor_method = \"auto\",   weights = NULL,   method_wCorr = \"Polychoric\",   remove_negative = TRUE,   EBICglasso = FALSE,   EBICglasso_arglist = NULL )"},{"path":"/reference/ResIN_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResIN_utils — ResIN_utils","text":"df data-frame object containing raw data. node_vars optional character string detailing attitude item columns selected ResIN analysis (.e. subset attitude variables df). cor_method correlation method used? Defaults \"auto\" applies cor_auto function qgraph package. Possible arguments \"auto\", \"pearson\", \"kendall\", \"spearman\". weights optional continuous vector survey weights. length number observations df. weights provided, weighted correlation matrix estimated weightedCorr function wCorr package. method_wCorr weights supplied, method weighted correlations used? Defaults \"Polychoric\". See wCorr::weightedCorr correlation options. remove_negative negative correlations removed? Defaults TRUE (highly recommended). Setting FALSE makes impossible estimate force-directed network layout. Function use igraph::layout_nicely instead. EBICglasso sparse, Gaussian-LASSO ResIN network estimated? Defaults FALSE. set TRUE, EBICglasso function qgraph packages performs regularization (nearest positive-semi-definite) ResIN correlation matrix. EBICglasso_arglist argument list feeding additional instructions EBICglasso function EBICglasso set TRUE.","code":""},{"path":"/reference/ResIN_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResIN_utils — ResIN_utils","text":"list object containing original dataframe, (resin_df), dummy-coded dataframe (resin_dummies), ResIN correlation covariance matrices (resin_cor & resin_vcov), numeric vector detailing item responses belong item (same_items).","code":""},{"path":"/reference/ResIN_utils.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ResIN_utils — ResIN_utils","text":"Epskamp S, Cramer AOJ, Waldorp LJ, Schmittmann VD, Borsboom D (2012). “qgraph: Network Visualizations Relationships Psychometric Data.” Journal Statistical Software, 48(4), 1–18.","code":""},{"path":"/reference/ResIN_utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResIN_utils — ResIN_utils","text":"","code":"## Load the 12-item simulated Likert-type ResIN toy dataset data(lik_data)  ## Extract the utilities output <- ResIN_utils(lik_data) #> Variables detected as ordinal: Item_1_1; Item_1_2; Item_1_3; Item_1_4; Item_1_5; Item_2_1; Item_2_2; Item_2_3; Item_2_4; Item_2_5; Item_3_1; Item_3_2; Item_3_3; Item_3_4; Item_3_5; Item_4_1; Item_4_2; Item_4_3; Item_4_4; Item_4_5; Item_5_1; Item_5_2; Item_5_3; Item_5_4; Item_5_5; Item_6_1; Item_6_2; Item_6_3; Item_6_4; Item_6_5; Item_7_1; Item_7_2; Item_7_3; Item_7_4; Item_7_5; Item_8_1; Item_8_2; Item_8_3; Item_8_4; Item_8_5; Item_9_1; Item_9_2; Item_9_3; Item_9_4; Item_9_5; Item_10_1; Item_10_2; Item_10_3; Item_10_4; Item_10_5; Item_11_1; Item_11_2; Item_11_3; Item_11_4; Item_11_5; Item_12_1; Item_12_2; Item_12_3; Item_12_4; Item_12_5"}]
